/* tslint:disable */
/* eslint-disable */
/**
 * GanttChartApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from './configuration';
import type {AxiosPromise, AxiosInstance, AxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError} from './base';

/**
 *
 * @export
 * @interface DeleteUsersIdRequest
 */
export interface DeleteUsersIdRequest {
    /**
     *
     * @type {number}
     * @memberof DeleteUsersIdRequest
     */
    'id'?: number;
}

/**
 *
 * @export
 * @interface DeleteUsersIdResponse
 */
export interface DeleteUsersIdResponse {
    /**
     *
     * @type {string}
     * @memberof DeleteUsersIdResponse
     */
    'msg'?: string;
}

/**
 *
 * @export
 * @interface GetUserInfoResponse
 */
export interface GetUserInfoResponse {
    /**
     *
     * @type {User}
     * @memberof GetUserInfoResponse
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface GetUsersIdRequest
 */
export interface GetUsersIdRequest {
    /**
     *
     * @type {number}
     * @memberof GetUsersIdRequest
     */
    'id'?: number;
}

/**
 *
 * @export
 * @interface GetUsersIdResponse
 */
export interface GetUsersIdResponse {
    /**
     *
     * @type {User}
     * @memberof GetUsersIdResponse
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     *
     * @type {Array<User>}
     * @memberof GetUsersResponse
     */
    'list': Array<User>;
}

/**
 *
 * @export
 * @interface PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     *
     * @type {string}
     * @memberof PostLoginRequest
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof PostLoginRequest
     */
    'password'?: string;
}

/**
 *
 * @export
 * @interface PostLoginResponse
 */
export interface PostLoginResponse {
    /**
     *
     * @type {boolean}
     * @memberof PostLoginResponse
     */
    'success'?: boolean;
}

/**
 *
 * @export
 * @interface PostLogoutResponse
 */
export interface PostLogoutResponse {
    /**
     *
     * @type {boolean}
     * @memberof PostLogoutResponse
     */
    'success'?: boolean;
}

/**
 *
 * @export
 * @interface PostUsersIdRequest
 */
export interface PostUsersIdRequest {
    /**
     *
     * @type {User}
     * @memberof PostUsersIdRequest
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface PostUsersIdResponse
 */
export interface PostUsersIdResponse {
    /**
     *
     * @type {User}
     * @memberof PostUsersIdResponse
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface PostUsersRequest
 */
export interface PostUsersRequest {
    /**
     *
     * @type {User}
     * @memberof PostUsersRequest
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface PostUsersResponse
 */
export interface PostUsersResponse {
    /**
     *
     * @type {User}
     * @memberof PostUsersResponse
     */
    'user'?: User;
}

/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'nickname': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    'updated_at'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary DeleteUsersId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsersId', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetUsersId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsersId', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary PostLogin
         * @param {PostLoginRequest} [postLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (postLoginRequest?: PostLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary PostLogout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary PostUsers
         * @param {PostUsersRequest} [postUsersRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsers: async (postUsersRequest?: PostUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary PostUsersId
         * @param {number} id
         * @param {PostUsersRequest} [postUsersRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersId: async (id: number, postUsersRequest?: PostUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postUsersId', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary DeleteUsersId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetUsersId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary PostLogin
         * @param {PostLoginRequest} [postLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(postLoginRequest?: PostLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(postLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary PostLogout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary PostUsers
         * @param {PostUsersRequest} [postUsersRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsers(postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsers(postUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary PostUsersId
         * @param {number} id
         * @param {PostUsersRequest} [postUsersRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersId(id: number, postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsersId(id, postUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @summary DeleteUsersId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<GetUsersResponse> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetUsersId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId(id: number, options?: any): AxiosPromise<GetUsersIdResponse> {
            return localVarFp.getUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary PostLogin
         * @param {PostLoginRequest} [postLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(postLoginRequest?: PostLoginRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postLogin(postLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary PostLogout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout(options?: any): AxiosPromise<void> {
            return localVarFp.postLogout(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary PostUsers
         * @param {PostUsersRequest} [postUsersRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsers(postUsersRequest?: PostUsersRequest, options?: any): AxiosPromise<PostUsersResponse> {
            return localVarFp.postUsers(postUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary PostUsersId
         * @param {number} id
         * @param {PostUsersRequest} [postUsersRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersId(id: number, postUsersRequest?: PostUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUsersId(id, postUsersRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary DeleteUsersId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary GetUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary GetUsersId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary PostLogin
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(postLoginRequest?: PostLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogin(postLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary PostLogout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary PostUsers
     * @param {PostUsersRequest} [postUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUsers(postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUsers(postUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary PostUsersId
     * @param {number} id
     * @param {PostUsersRequest} [postUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUsersId(id: number, postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUsersId(id, postUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


